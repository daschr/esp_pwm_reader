var searchIndex = JSON.parse('{\
"esp_pwm_reader":{"doc":"esp_pwm_reader","t":"DEDENNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["CaptureTimer","CaptureTimerError","ChannelReader","ChannelReaderError","CreateChannel","Disable","Enable","EnableChannel","GetTimerResolution","InvalidGroupId","New","RegisterCallback","Start","Stop","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","enable_and_start","fmt","fmt","fmt","fmt","from","from","from","from","get_value","into","into","into","into","new","new","stop_and_disable","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"esp_pwm_reader"]],"d":["This timer is used by a capture Channel insinde a …","Errors which can occur by calls to the mcpwm submodule of …","Can read the current value of the PWM signal on the …","Errors which can occur by calls to the mcpwm submodule of …","at mcpwm_new_capture_channel","at mcpwm_capture_timer_disable","at mcpwm_capture_timer_enable","at mcpwm_capture_channel_enable","at mcpwm_capture_timer_get_resolution","","at mcpwm_new_capture_timer","at mcpwm_capture_channel_register_event_callbacks","at mcpwm_capture_timer_start","at mcpwm_capture_timer_stop","","","","","","","","","Enable and start the timer, needed for reading a value …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the current measured pwm signal in microseconds (μs)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new CaptureTimer, needs the MCPWM group id (see …","Needs a CaptureTimer and the gpio input pin where the …","Stopping and disabling the timer, all connected …","","","","","","","","","","","",""],"i":[0,0,0,0,7,2,2,7,7,2,2,7,2,2,1,2,6,7,1,2,6,7,1,1,2,6,7,1,2,6,7,6,1,2,6,7,1,6,1,1,2,6,7,1,2,6,7,1,2,6,7],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[3,[2]]]],[[1,4],5],[[2,4],5],[[6,4],5],[[7,4],5],[[]],[[]],[[]],[[]],[6,8],[[]],[[]],[[]],[[]],[9,[[3,[1,2]]]],[[1,10],[[3,[6,7]]]],[1,[[3,[2]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],11],[[],11],[[],11],[[],11]],"c":[],"p":[[3,"CaptureTimer"],[4,"CaptureTimerError"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"ChannelReader"],[4,"ChannelReaderError"],[15,"u64"],[15,"i32"],[6,"gpio_num_t"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
